Program Body
{
  int M;
  double x;
  x = uniform(-1, 1);
  double y;
  y = uniform(-1, 1);
  while (x < M)
  {
    x = x;
    y = y;
    s = s;
  }

}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ y:double x:double M:int}

Output in normal notation:
1. Frame axioms:
M1 = M

2. Output equations:
y1 = y3(_N1)
x1 = x3(_N1)

3. Other axioms:
y3((_n1+1)) = y3(_n1)
x3((_n1+1)) = x3(_n1)
y3(0) = RV(uniform,-(1),1)
x3(0) = RV(uniform,-(1),1)
(0<=(-(M)+x3(_N1)))
(_n1<_N1) -> (x3(_n1)<M)



II. Expected Values :



Output in normal notation:
1. Frame axioms:
E[M1] = M

2. Output equations:
E[y1] = y3(_N1)
E[x1] = x3(_N1)

3. Other axioms:
E[y3((_n1+1))] = y3(_n1)
E[x3((_n1+1))] = x3(_n1)
E[y3(0)] = RV(uniform,-(1),1)
E[x3(0)] = RV(uniform,-(1),1)
(E[0] <=(E[-(M)] +E[x3(_N1)]))
(_n1<_N1) -> (E[x3(_n1)] <E[M])



III. Higher Moment :



Output in normal notation:
1. Frame axioms:
E[(M1)**_h] = E[(M)**_k]

2. Output equations:
E[(y1)**_h] = E[(y3(_N1))**_k]
E[(x1)**_h] = E[(x3(_N1))**_k]

3. Other axioms:
E[(y3((_n1+1)))**_h] = E[(y3(_n1))**_k]
E[(x3((_n1+1)))**_h] = E[(x3(_n1))**_k]
E[(y3(0))**_h] = E[(RV(uniform,-(1),1))**_k]
E[(x3(0))**_h] = E[(RV(uniform,-(1),1))**_k]
(E[(0)**_k] <=(E[(-(M) +x3(_N1))**k]))
(_n1<_N1) -> (E[(x3(_n1) <M)**k])

