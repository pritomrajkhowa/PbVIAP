Program Body
{
  int M;
  double h;
  h = 0;
  double x;
  x = 0;
  double y;
  y = 0;
  while (y < M)
  {
    h = W_(1 / 2, 1, 0);
    x = W_(1 / 2, x - h, x + h);
    y = W_(1 / 2, y + (1 - h), y - (1 - h));
  }

}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ y:double h:double M:int x:double}

Output in normal notation:
1. Frame axioms:
M1 = M

2. Output equations:
y1 = y3(_N1)
h1 = W_((1/2),1,0)
x1 = x3(_N1)

3. Other axioms:
y3((_n1+1)) = W_((1/2),(y3(_n1)+(1-W_((1/2),1,0))),(y3(_n1)-(1-W_((1/2),1,0))))
x3((_n1+1)) = W_((1/2),(x3(_n1)-W_((1/2),1,0)),(x3(_n1)+W_((1/2),1,0)))
y3(0) = 0
x3(0) = 0
(0<=(-(M)+y3(_N1)))
(_n1<_N1) -> (y3(_n1)<M)



II. Expected Values :



Output in normal notation:
1. Frame axioms:
E[M1] = M

2. Output equations:
E[y1] = y3(_N1)
E[h1] = ((1/2))*(1)+(1-(1/2))*(0)
E[x1] = x3(_N1)

3. Other axioms:
E[y3((_n1+1))] = ((1/2))*((E[y3(_n1)] +(E[1] -E[((1/2))*(1)+(1-(1/2))*(0)])))+(1-(1/2))*((y3(_n1)-(1-W_((1/2),1,0))))
E[x3((_n1+1))] = ((1/2))*((E[x3(_n1)] -E[((1/2))*(1)+(1-(1/2))*(0)]))+(1-(1/2))*(E[(x3(_n1)+W_((1/2),1,0))])
E[y3(0)] = 0
E[x3(0)] = 0
(E[0] <=(E[-(M)] +E[y3(_N1)]))
(_n1<_N1) -> (E[y3(_n1)] <E[M])



III. Higher Moment :



Output in normal notation:
1. Frame axioms:
E[(M1)**_h] = E[(M)**_k]

2. Output equations:
E[(y1)**_h] = E[(y3(_N1))**_k]
E[(h1)**_h] = E[(((1/2))*(1)**_k+(1-(1/2))*(0)**_k)**_k]
E[(x1)**_h] = E[(x3(_N1))**_k]

3. Other axioms:
E[(y3((_n1+1)))**_h] = E[(((1/2))*((E[(y3(_n1))**_k] +(E[(1 -((1/2))*(1)**_k+(1-(1/2))*(0)**_k)**k])))**_k+(1-(1/2))*((y3(_n1)-(1-W_((1/2),1,0))))**_k)**_k]
E[(x3((_n1+1)))**_h] = E[(((1/2))*((E[(x3(_n1) -((1/2))*(1)**_k+(1-(1/2))*(0)**_k)**k]))**_k+(1-(1/2))*(E[(x3(_n1)+W_((1/2),1,0))])**_k)**_k]
E[(y3(0))**_h] = E[(0)**_k]
E[(x3(0))**_h] = E[(0)**_k]
(E[(0)**_k] <=(E[(-(M) +y3(_N1))**k]))
(_n1<_N1) -> (E[(y3(_n1) <M)**k])

