Program Body
{
  int M;
  double f;
  f = 0;
  double x;
  x = 0;
  double y;
  y = 0;
  double p;
  p = 0;
  while (y < M)
  {
    f = W_(1 / 2, 0, 1);
    x = x + f;
    y = (y + 1) - f;
    p = x * y;
  }

}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ y:double x:double M:int p:double f:double}

Output in normal notation:
1. Frame axioms:
M1 = M

2. Output equations:
y1 = y4(_N1)
x1 = x4(_N1)
f1 = W_((1/2),0,1)
p1 = p4(_N1)

3. Other axioms:
y4((_n1+1)) = ((y4(_n1)+1)-W_((1/2),0,1))
x4((_n1+1)) = (x4(_n1)+W_((1/2),0,1))
p4((_n1+1)) = ((x4(_n1)+W_((1/2),0,1))*((y4(_n1)+1)-W_((1/2),0,1)))
y4(0) = 0
x4(0) = 0
p4(0) = 0
(0<=(-(M)+y4(_N1)))
(_n1<_N1) -> (y4(_n1)<M)



II. Expected Values :



Output in normal notation:
1. Frame axioms:
E[M1] = M

2. Output equations:
E[y1] = y4(_N1)
E[x1] = x4(_N1)
E[f1] = ((1/2))*(0)+(1-(1/2))*(1)
E[p1] = p4(_N1)

3. Other axioms:
E[y4((_n1+1))] = (E[(y4(_n1)+1)] -E[((1/2))*(0)+(1-(1/2))*(1)])
E[x4((_n1+1))] = (E[x4(_n1)] +E[((1/2))*(0)+(1-(1/2))*(1)])
E[p4((_n1+1))] = E[((x4(_n1)+W_((1/2),0,1))*((y4(_n1)+1)-W_((1/2),0,1)))]
E[y4(0)] = 0
E[x4(0)] = 0
E[p4(0)] = 0
(E[0] <=(E[-(M)] +E[y4(_N1)]))
(_n1<_N1) -> (E[y4(_n1)] <E[M])



III. Higher Moment :



Output in normal notation:
1. Frame axioms:
E[(M1)**_h] = E[(M)**_k]

2. Output equations:
E[(y1)**_h] = E[(y4(_N1))**_k]
E[(x1)**_h] = E[(x4(_N1))**_k]
E[(f1)**_h] = E[(((1/2))*(0)**_k+(1-(1/2))*(1)**_k)**_k]
E[(p1)**_h] = E[(p4(_N1))**_k]

3. Other axioms:
E[(y4((_n1+1)))**_h] = (E[((y4(_n1)+1) -((1/2))*(0)**_k+(1-(1/2))*(1)**_k)**k])
E[(x4((_n1+1)))**_h] = (E[(x4(_n1) +((1/2))*(0)**_k+(1-(1/2))*(1)**_k)**k])
E[(p4((_n1+1)))**_h] = ((x4(_n1)+W_((1/2),0,1))*((y4(_n1)+1)-W_((1/2),0,1)))
E[(y4(0))**_h] = E[(0)**_k]
E[(x4(0))**_h] = E[(0)**_k]
E[(p4(0))**_h] = E[(0)**_k]
(E[(0)**_k] <=(E[(-(M) +y4(_N1))**k]))
(_n1<_N1) -> (E[(y4(_n1) <M)**k])

